*pyclewn.txt*                                   Last change: 2008 February 5


                            PYCLEWN USER MANUAL

The Pyclewn user guide                              *pyclewn*

1. Introduction                                     |pyclewn-intro|
2. Starting pyclewn                                 |pyclewn-starting|
3. Using pyclewn                                    |pyclewn-using|
4. Gdb                                              |pyclewn-gdb|
5. Key mappings                                     |pyclewn-mappings|
6. Variable debugger window                         |pyclewn-variable|
7. Extending pyclewn                                |pyclewn-extending|


==============================================================================
1. Introduction                                     *pyclewn-intro*


Pyclewn is a python program that allows the use of gvim as a front end to a
debugger. Pyclewn uses the netbeans protocol to control gvim.

The debugger output is redirected to a vim window, the|pyclewn-console|. The
debugger commands are mapped to vim user-defined commands with a common letter
prefix (the default is the|C|letter), and with vim command completion
available on the commands and their first argument.

The controlling terminal of the program to debug is the terminal used to
launch pyclewn, or any other terminal when the debugger allows it (for
example, gdb with the attach and tty commands).


Pyclewn currently supports the following debuggers:

    * gdb:      version 6.0 and above
                pyclewn uses the gdb MI interface

    * simple:   a fake debugger implemented in python to test pyclewn
                internals


Pyclewn provides the following features:
---------------------------------------

* A debugger command can be mapped in vim to a key sequence using vim key
  mappings. This allows, for example, to set/clear a breakpoint or print a
  variable value at the current cursor or mouse position by just hitting a
  key.

* Breakpoints and the line in the current frame are highlighted in the source
  code. Disabled breakpoints are noted with a different highlighting color.
  Pyclewn automatically finds the source file for the breakpoint if it exists,
  and tells vim to load and display the file and highlight the line.

* An expression value or a variable value is displayed in a balloon in vim
  when the mouse pointer is hovering over the selected expression or the
  variable.

* Variables or expressions can be watched in the variable debugger vim window.
  The variable or expression value is updated and highlighted whenever
  changed.

* Vim command completion on the commands and their first argument.


The remaining sections of this manual are:
-----------------------------------------

    2.|pyclewn-starting|lists the command line options and their usage.

    3.|pyclewn-using|explains how to use the pyclewn features common to all
       supported debuggers

    4.|pyclewn-gdb|details all the topics relevant to pyclewn and the gdb
       debugger.

    5.|pyclewn-mappings|lists the pyclewn key mappings and how to use them.

    6.|pyclewn-variable|explains how to use the variable debugger window.

    7.|pyclewn-extending|explains how to implement a new debugger in pyclewn


==============================================================================
2. Starting pyclewn                                 *pyclewn-starting*


To use with gdb, pyclewn is usually simply started as: >

    pyclewn


The debugger is started by running a debugger command from vim command line.
For example, load foobar with the gdb command "file" and start gbd by typing
on the vim command line, possibly using completion: >

    :Cfile foobar


.                                                    *Ccommand* *C*
The prefix letter|C|is the default vim command prefix used to map debugger
commands to vim user-defined commands. These commands are called|Ccommand|in
this manual. The prefix can be changed with a command line option.


To restart a new instance of the debugger, quit the current debugger instance
and start the new instance by running any debugger command from vim (except
"quit" of course).


Pyclewn can be started with the following options:

options:
  --version                   show program's version number and exit
  -h, --help                  show this help message and exit
  -s, --simple                select the simple debugger
  -g, --gdb                   select the gdb debugger (the default)
  -d, --daemon                run as a daemon (default 'False')
  -p PGM, --pgm=PGM           set the debugger program to PGM
  -a ARGS, --args=ARGS        set the debugger program arguments to ARGS
  -e EDITOR, --editor=EDITOR  set the editor program to EDITOR (default
                              gvim)
  -c ARGS, --cargs=ARGS       set the editor program arguments to ARGS
  -x PREFIX, --prefix=PREFIX  set the commands prefix to PREFIX (default|C|)
  -n CONN, --netbeans=CONN    set netBeans connection parameters to CONN with
                              CONN as 'host[:port[:passwd]]', (the default is
                              ':3219:changeme' where the empty host represents
                              INADDR_ANY)
  -l LEVEL, --level=LEVEL     set the log level to LEVEL: critical, error,
                              warning, info, debug or nbdebug (default error)
  -f FILE, --file=FILE        set the log file name to FILE


The full description of the command line options follows:
--------------------------------------------------------

--version           Show program's version number and exit.

-h
--help              Show this help message and exit.

-s
--simple            Select the simple debugger. In that case, the --pgm and
                    --args options are meaningless. The simple debugger is
                    documented in debugger/simple.py, in the source
                    distribution.

-g
--gdb               Select the gdb debugger (the default). The --pgm option
                    defaults to gdb.

-d
--daemon            Run as a daemon (default 'False'): pyclewn is detached
                    from the terminal from where it has been launched, which
                    means that this terminal cannot be used as a controlling
                    terminal for the program to debug, and cannot be used for
                    printing the pyclewn logs as well.

-p {PGM}
--pgm={PGM}         Set the debugger program to PGM. PGM must be in one of the
                    directories listed in the PATH environment variable.

-a {ARGS}
--args={ARGS}       Set the debugger program arguments to ARGS. These
                    arguments may be double quoted. For example, start gdb
                    with the program foobar and "this is foobar argument" as
                    foobar's argument: >

                    pyclewn -a '--args foobar "this is foobar argument"'

-e {EDITOR}
--editor={EDITOR}   Set the editor program to EDITOR (default gvim). EDITOR
                    must be in one of the directories listed in the PATH
                    environment variable.

-c {ARGS}
--cargs={ARGS}      Set the editor program arguments to ARGS, possibly double
                    quoted (same as option --args).

-x {PREFIX}
--prefix={PREFIX}   Set the user defined vim commands prefix to PREFIX
                    (default|C|). The prefix may be more than one letter
                    long. The first letter must be upper case.

-n {CONN}
--netbeans={CONN}   Set netBeans connection parameters to CONN with CONN as
                    'host[:port[:passwd]]', (the default is ':3219:changeme'
                    where the empty host represents INADDR_ANY). Pyclewn
                    listens on host:port, with host being a name or the IP
                    address of one of the local network interfaces in standard
                    dot notation. These parameters must match those used by
                    gvim for the connection to succeed.

-l {LEVEL}
--level={LEVEL}     Set the log level to LEVEL: critical, error, warning, info,
                    debug or nbdebug (default error). Level nbdebug is very
                    verbose and logs all the netbeans pdu as well as all the
                    debug traces.

-f {FILE}
--file={FILE}       Set the log file name to FILE.


==============================================================================
3. Using pyclewn                            *pyclewn-using* *pyclewn-console*


Console:
--------
The debugger output is redirected to a vim window: the console.

The console window pops up whenever a|Ccommand|is entered on vim command line.
This does not happen when using keys mapped by pyclewn and it is possible to
keep the console closed by using only those keys.

The initial console window height is set with the vim option 'previewheight'
that defaults to 12 lines.


Commands:
---------
A debugger command can be entered on vim command line with the|C|prefix. It is
also possible to enter the command as the first argument of the|C|command. In
the following example with gdb, both methods are equivalent: >

    :Cfile /path/to/foobar
    :C file /path/to/foobar

The first method provides completion on the file name while the second one
does not.

The second method is useful when the command is a user defined command in the
debugger (user defined commands built by <define> in gdb), and therefore not a
vim command. It is also needed for gdb command names that cannot be mapped to
a vim command because vim does not accept non alphanumeric characters within
command names (for example <core-file> in gdb).

To get help on the pyclewn commands, use Chelp.

Pyclewn commands can be mapped to keys, or called within a Vim script or a
menu. When two pyclewn commands are invoked in a row, a sleep time must be
inserted between both commands when the debugger cannot handle requests
asynchronously (as this is the case with gdb).  For example: >

    :Cfile /path/to/foobar | sleep 200m | Cbreak main

Quotes and backslashes must be escaped on vim command line. For example, to
print a string in gdb: >

    :Cprint \"foobar\"

And to print a string including a new line: >

    :Cprint \"foobar\\n\"


Completion:
-----------
Command line completion in vim is usually done using the <Tab> key (set by the
'wildchar' option). To get the list of all valid completion matches, type
CTRL-D. For example, to list all the debugger commands (assuming the
default|C|prefix is being used): >

    :C<C-D>

See also the 'wildmenu' option. With this option, the possible matches are
shown just above the command line and can be selected with the arrow keys.

The first argument completion of a|Ccommand|may be done on a file name or on a
list. For example with gdb, the following command lists all the gdb help
items: >

    :Chelp <C-D>

The first argument completion of the|C|command is the list of all the debugger
commands. For example, to list all the debugger commands (note the space after
the|C|): >

    :C <C-D>


Command line search:
--------------------
Use the powerful command line search capabilities of the Vim command line.
For example, you want to type again, possibly after a little editing, one of
the commands previously entered: >

    Cprint (*(foo*)0x0123ABCD)->next->next->part1->something_else.aaa

You can get rapidly to this command by using the Vim command line window
|cmdline-window|: >

    :<CTRL-F>
    /something_else
    <CR>

or >
    q:
    /something_else
    <CR>


Balloon:
--------
A variable is evaluated by the debugger and displayed in a balloon in vim,
when the mouse pointer is hovering over the the variable. To get the
evaluation of an expression, first select the expression in visual mode in the
source code and point the mouse over the selected expression. To disable this
feature, set the vim option 'noballooneval'.


Pyclewn commands:
-----------------
The|Ccommand|list includes all the debugger commands and some pyclewn specific
commands that are listed here:

    * Cdbgvar        add a watched variable or expression to the
                     (clewn)_dbgvar buffer

    * Cdelvar        delete a watched variable from the (clewn)_dbgvar buffer

    * Cdumprepr      print on the console, pyclewn internal structures that
                     may be used for debugging pyclewn

    * Chelp          print on the console, help on the pyclewn specific
                     commands (those on this list) in addition to the help on
                     the debugger commands

    *|Cmapkeys|      map pyclewn keys

    * Csigint        send a <C-C> character to the debugger to interrupt the
                     running program that is being debugged (only with gdb,
                     and when pyclewn and gdb communicate over a pseudo
                     terminal)

    *|Csymcompletion|populate the break and clear commands with symbols
                     completion (only with gdb)

    * Cunmapkeys     unmap the pyclewn keys, this vim command does not invoke
                     pyclewn

==============================================================================
4. Gdb                                              *pyclewn-gdb*


Note: One particularly useful tutorial on gdb is Peter Jay Salzman's, at
http://www.dirac.org/linux/gdb/.


When gdb is started, it automatically executes commands from its
init files, normally called '.gdbinit'. See gdb documentation.


List of illegal gdb commands:
-----------------------------
The following gdb commands cannot be run from pyclewn:

        commands
        complete
        define
        edit
        end
        set annotate
        set confirm
        set height
        set width
        shell

The <define> command is not allowed. To build gdb user-defined commands in
pyclewn, edit the commands in a temporary file with vim, and load the
commands into gdb by using the gdb <source> command on this file.

The <commands> command is not allowed. To give a breakpoint a series of
commands to execute when the debuggee stops due to that breakpoint, edit the
commands in a temporary file with vim, and load the commands into gdb by using
the gdb <source> command on this file.


Debuggee standard input and output:
-----------------------------------
When pyclewn is started from a terminal and not as a daemon, the standard
input and output of the program to debug are those of the terminal from where
pyclewn was started.

When pyclewn is run as a daemon, the <tty> gdb command, or the <attach> gdb
command can be used to control the input and output of the program to debug.


                                                    *gdb-keys*
List of gdb default key mappings:
--------------------------------
These keys are mapped after the|Cmapkeys|vim command is run.

        CTRL-Z  send an interrupt to gdb and the program it is running
        B       info breakpoints
        L       info locals
        A       info args
        S       step
        CTRL-N  next: next source line, skipping all function calls
        F       finish
        R       run
        Q       quit
        C       continue
        W       where
        CTRL-U  up: go up one frame
        CTRL-D  down: go down one frame

cursor position: ~
        CTRL-B  set a breakpoint on the line where the cursor is located
        CTRL-E  clear all breakpoints on the line where the cursor is located

mouse pointer position: ~
        CTRL-P  print the value of the variable defined by the mouse pointer
                position
        CTRL-X  print the value that is referenced by the address whose
                value is that of the variable defined by the mouse pointer
                position


                                                    *$cdir*
Source path:
-----------
Pyclewn automatically locates the source file with the help of gdb, by using
the debugging information stored in the file that is being debugged. This is
useful when the program to debug is the result of multiple compilation units
located in different directories. This feature is only available starting with
gdb 6.2.1.

When using a gdb version older than 6.2.1, and in order to have gdb find your
source files when they are not located in the current directory, you must add
the relevant directories to the gdb directory variable. For example: >

    Cfile /path/to/this_project/foobar

    Cdirectory /path/to/this_project

    Cbreak main

The last command will set a breakpoint and have vim edit
/path/to/this_project/foobar.c with the appropriate line highlighted (assuming
main is in foobar.c).


                                                    *Csymcompletion*
Symbols completion:
-------------------
The gdb <break> and <clear> commands are set initially with file name
completion. This can be changed to completion matching the symbols of the
program being debugged, after running the|Csymcompletion|command. This is a
pyclewn command.

To minimize the number of loaded symbols and to avoid fetching the shared
libraries symbols, run the Csymcompletion command after the file is loaded
with the gdb <file> command, and before the program is run.


Known limitations:
------------------
    * The frame sign is not turned off after a user-defined command, when the
      command includes a <continue> statement for example.

    * When the program being debugged stops while in a function called from
      gdb (for example after using the gdb <print> command on the function
      (foo) where a breakpoint is set). When the function (foo) is done
      executing, pyclewn incorrectly does not show the frame sign.
      In this case, to display the frame sign, one must run the gdb <frame>
      command.


==============================================================================
5. Key mappings                                 *pyclewn-mappings* *Cmapkeys*


All|Ccommand|can be mapped to vim keys using the vim|:map-commands|.

This section describes another mapping mechanism where pyclewn maps vim keys
by reading a configuration file. This is done when the|Cmapkeys|vim command is
run. The pyclewn keys mapping is mostly useful for the pyclewn casual user.
When the configuration file cannot be found, pyclewn sets the default key
mappings.|gdb-keys|lists the default key mappings for gdb.

The configuration file is named .pyclewn_keys.{debugger}, where debugger is
the name of the debugger. The default placement for this file is
$CLEWNDIR/.pyclewn_keys.{debugger}, or $HOME/.pyclewn_keys.{debugger}.

To customize pyclewn key mappings copy the configuration file found in the
distribution to the proper directory: >

    cp runtime/.clewn_keys.gdb        $CLEWNDIR

or >

    cp runtime/.clewn_keys.gdb        $HOME

The comments in the configuration file explain how to customize the key
mappings.

The difference between keys mapped by pyclewn and keys mapped by vim
|:map-commands|is that in the first case, the clewn console does not pop up
each time a pyclewn key is pressed.


==============================================================================
6. Variable debugger window                         *pyclewn-variable*


==============================================================================
7. Extending pyclewn                                *pyclewn-extending*


To implement a new debugger in pyclewn:

    1 - Add a module in the clewn.debugger package that implements a subclass
        of clewn.Application.

    2 - Update the pyclewn script to import the new clewn.Application
        subclass.

    3 - Update the pyclewn documentation at runtime/doc/pyclewn.txt

    4 - Add tests to the testsuite

    5 - Update setup.py to import the new clewn.Application subclass. The
        .pyclewn_keys.{debugger} keys map file is automatically created when
        building the pyclewn source distribution with: >

            python setup.py sdist


The interface between pyclewn and the debugger is documented in application.py.
This module contains the abstract class clewn.Application. The abstract class
clewn.Application provides the following methods to control gvim (see
application.py for the documentation):

console_print       print on the pyclewn gvim console
show_balloon        display a balloon in gvim
add_bp              add a breakpoint sign
delete_bp           delete a breakpoint sign
update_bp           change the state of a breakpoint sign
delete_all          remove signs
show_frame          show the sign of the line in the current frame
close               close the application and remove all signs

The (clewn)_dbgvar buffer is loaded by invoking its register method, and the
buffer content is updated with its update method. See the simple.py module for
an example.


Summary of the components of a subclass of clewn.Application that must be
implemented (the simple.py module can be used as an example):

    . class attributes that describe the available command line options

    . a dictionary of the debugger commands and their first argument
      completion

    . a list of illegal commands

    . a dictionary of the keys and their mappings

    . the implementation of the methods:
        default_cmd_processing
        pre_cmd
        post_cmd

    . the implementation of methods cmd_<name> for the debugger <name>
      commands; when the implementation of a method is missing for a debugger
      command, pyclewn invokes the default_cmd_processing method whose
      implementation is required


==============================================================================
$Id$
vim:tw=78:ts=8:ft=help:norl:et:
